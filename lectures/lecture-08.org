[[./lecture-07.ipynb]]

#+TITLE: Multiple reactions in reactor design (Ch. 6)

* Rates for multiple reactions

When we have multiple reactions, e.g.

1. $A \rightarrow 2B$
2. $B \rightarrow C$

we have a scenario where a species maybe consumed and/or generated by multiple reactions.

Each reaction will have its own reaction rate. We denote the rate of reaction $i$ as $r_i$.

In this example, we might have $r_1 = k_1 C_A$, and $r_2 = k_2 C_B$.

Then we have from reaction 1 that the rate of production of B is $r_{1,B} = 2 r_1$ and the rate of consumption in reaction two is $r_{2,B} = -r_2$.

The net rate of production of species B is the sum of these two species specific rates.

\( r_B = r_{1,B} + r_{2,b} \)

\( r_B = 2 r_1 - r_2 \)

Note that B is produced by reaction 1, and consumed by reaction 2. So we expect the concentration of B to initially rise since it is being produced, but eventually to fall since it will be consumed by reaction 2, and these reactions are irreversible.This is an example of a reactions in series.

This is the expression we would use in a species mole balance. For example, in a constant volume batch reactor we would have:

\( \frac{dN_B}{dt} = V r_B = V (2 r_1 - r_2)\)

In this example you also need another mole balance on species A because $r_1$ depends on the concentration of A.

- Critical points
  + We need rate laws for each reaction
  + You derive the species rates using stoichiometry for each reaction
  + You add all the species rates together to get the net rate of reaction for the species

Let us work out this example completely. Let us consider a constant volume batch reactor. We have the following data:

| k1     | 0.09 1/min |
| k2     | 0.2 1/min  |
| C_{A0} | 2.5 M      |

We want to plot the concentration of A and B as a function of time up to thirty minutes. Find the time where the concentration of B is a maximum.

As usual we start with the given information.

#+BEGIN_SRC ipython :session :results output drawer
import numpy as np
from scipy.integrate import odeint

k1 = 0.09 # 1/min  assuming both are first order
k2 = 0.2  # 1/min  r2 = k2 * Cb

CA0 = 2.5 # mol/L
#+END_SRC

We have to define two mole balances, one on species A and one on species B. Here is how we do that. We create a function that returns the two ODEs. Since here we have a constant volume batch reactor the two mole balances are:

$\frac{dC_A}{dt} = r_A$

$\frac{dC_B}{dt} = r_B$

We work from the bottom of the function up. The function returns the two derivatives, and we define each term in reverse order to the top of the function.

#+BEGIN_SRC ipython :session :results output drawer silent
def batch(C, t):
    Ca, Cb = C
    r1 = k1 * Ca
    r2 = k2 * Cb

    ra = -r1
    r1b = 2 * r1
    r2b = -r2
    rb = r1b + r2b

    dCadt = ra
    dCbdt = rb

    return [dCadt, dCbdt]
#+END_SRC

Finally, we integrate the equations.

#+BEGIN_SRC ipython :session :results output drawer
init = [CA0, 0.0] # initial conditions
tspan = np.linspace(0, 30) # min
sol = odeint(batch, init, tspan)

import matplotlib.pyplot as plt
plt.plot(tspan, sol)
plt.xlabel('Time (min)')
plt.ylabel('Conc (mol/L)')
plt.legend(['A','B'])

imax = np.argmax(sol[:, 1])
print('C_{{B,max}} is {:1.2f} M at t = {:1.2f} min'.format(sol[imax, 1], tspan[imax]))

# compare to
Ca, Cb = sol.T
imax = np.argmax(Cb)
print('C_{{B,max}} is {:1.2f} M at t = {:1.2f} min'.format(Cb[imax], tspan[imax]))
#+END_SRC
#+RESULTS:
:RESULTS:
C_{B,max} is 1.17 M at t = 7.35 min
C_{B,max} is 1.17 M at t = 7.35 min
[[file:ipython-inline-images/ob-ipython-9bd8466e1e7c711cfd630ce59f6f507a.png]]
:END:


You can see here that A continuously disappears. A is only consumed in the first reaction.

Initially, B increases as it is produced by the first reaction. However, it begins to be consumed by reaction two, and eventually is completely consumed. If B was the desired product, you could maximize the yield by stopping the reaction after a short time. This is typical for a series reaction.

* Mole balances with multiple reactions

- There is nothing particularly new in mole balances with multiple reactions

- We still write species based mole balances

For the reaction $aA + bB \rightarrow cC + dD$ which occurs at a rate of $r$ we use:

$r = \frac{r_A}{-a} = \frac{r_B}{-b} = \frac{r_C}{c} = \frac{r_D}{d}$

or in other words:

$r_A = -a r$

$r_B = -b r$

$r_C = c r$

$r_D = d r$

- We use the net rate law for each species, e.g. $r_A = r_{1,A} + r_{2,A}$.

- This typically leads to coupled equations
  + For CSTRs these are often coupled nonlinear algebra equations
  + For PFRs these are often coupled differential equations

** Multiple reactions in a CSTR

Mesitylene (trimethyl benzene) can be hydrogenated to form m-xylene, which can be further hydrogenated to toluene

- The reactions we consider are:

\begin{align}
M + H_2 \rightarrow X + CH_4 \\
X + H_2 \rightarrow T + CH_4
\end{align}

- The reaction is carried out isothermally at 1500 $^\circ$ R at 35 atm.
- The feed is 2/3 hydrogen and 1/3 mesitylene
- The volumetric feed rate is 476 cubic feet per hour and the reactor volume is 238 cubic feet
- The rate laws are

\begin{align}
r_1 = k_1 C_M C_H^{0.5} \\
r_2 = k_2 C_X C_H^{0.5}
\end{align}

- The rate constants are:
\begin{align}
k_1 = 55.20 \textrm{(ft$^3$/lb mol)$^{0.5}$/h} \\
k_2 = 30.20 \textrm{(ft$^3$/lb mol)$^{0.5}$/h} \\
\end{align}

Find the exit concentrations of each species.

Here is the code we need to setup and solve this problem. We have to setup 5 steady state mole balances which will all be equal to zero when we have the right exit concentrations. We do not have to worry about mole number changes here, since no reaction has a mole number change in it.

Here is the given information
#+BEGIN_SRC ipython :session :results output drawer 
vo = 476.0    # ft^3 / hr
V = 238.0     # ft^3
Po = 35.0     # atm
T = 1500.0    # Rankine
R = 0.73      # in appropriate units
CTo = Po / R / T

Cmo = CTo / 3.0
Cho = CTo * 2.0 / 3.0
Cxo = 0.0
Cmeo = 0.0
Ctolo = 0.0

print('Cmo = {:1.3f} mol/ft^3 and Cho = {:1.3f} mol / ft^3'.format(Cmo, Cho))

k1 = 55.20  # (ft^3/lbmol)^0.5/h
k2 = 30.20  # (ft^3/lbmol)^0.5/h
#+END_SRC

#+RESULTS:
:RESULTS:
Cmo = 0.011 mol/ft^3 and Cho = 0.021 mol / ft^3
:END:

And the objective function we have to solve. This is just the 5 mole balances. We define the two reaction rates, and then use stoichiometry to define the net rates for each species.

#+BEGIN_SRC ipython :session :results output drawer silent
def objective(C):
    CM, CH, CX, CMe, CT = C

    # rate laws
    r1 = k1 * CM * CH**0.5 
    r2 = k2 * CX * CH**0.5

    # net rates using stoichiometry
    rM = -r1
    rH = -r1 - r2
    rX = r1 - r2
    rMe = r1 + r2
    rT = r2

    return [Cmo * vo - CM * vo + rM * V,
            Cho * vo - CH * vo + rH * V,
            Cxo * vo - CX * vo + rX * V,
            Cmeo * vo - CMe * vo + rMe * V,
            Ctolo * vo - CT * vo + rT * V]
#+END_SRC

Now we need to solve it, and for that we need an initial guess. We have a 5 dimensional space to guess in! For now, we just make a guess. We guess these small numbers based on the initial concentrations of reactants, and guessing a conversion of reactants. You can try many values and find out that it does not seem to matter much what you choose, you always get the same answers, which suggests (but does not prove) that there are not many other solutions.

#+BEGIN_SRC ipython :session :results output drawer
initGuesses = [0.005, 0.01, 0.005, 0.002, 0.01]
from scipy.optimize import fsolve

exitC = fsolve(objective, initGuesses)

species = ['M', 'H', 'X', 'Me', 'T']
for s,C in zip(species, exitC):
    print('{0:^3s}{1:1.5f} lbmol/ft^3'.format(s,C))
#+END_SRC

#+RESULTS:
:RESULTS:
 M 0.00294 lbmol/ft^3
 H 0.00905 lbmol/ft^3
 X 0.00317 lbmol/ft^3
Me 0.01226 lbmol/ft^3
 T 0.00455 lbmol/ft^3
:END:


** Multiple reactions in a PFR

Now we solve the same problem in a PFR. This will lead to a set of coupled ODEs.

#+BEGIN_SRC ipython :session :results output drawer silent
Fto = CTo * vo

# initial molar flows
Fmo = Fto / 3.0
Fho = Fto * 2.0 / 3.0
Fxo = 0.0
Fmeo = 0.0
Ftolo = 0.0
#+END_SRC


The ode function is defined like this:

#+BEGIN_SRC ipython :session :results output drawer silent
def dFdV(F, t):
    'PFR mole balances'
    Ft = F.sum()

    v = vo * Ft / Fto # we do not take chances and guess the vol flow might change.
    C = F / v
    CM, CH, CX, CMe, CT = C

    # rate laws
    k1 = 55.20
    k2 = 30.20
    r1m = -k1 * CM * CH**0.5
    r2t = k2 * CX * CH**0.5

    # net rates
    rM = r1m
    rH = r1m - r2t
    rX = -r1m - r2t
    rMe = -r1m + r2t
    rT = r2t

    dFMdV = rM
    dFHdV = rH
    dFXdV = rX
    dFMedV = rMe
    dFTdV = rT

    return [dFMdV, dFHdV, dFXdV, dFMedV, dFTdV]
#+END_SRC

To solve this we need initial conditions (compare this to the need for the initial guess for the CSTR).

#+BEGIN_SRC ipython :session :results output drawer
Finit = [Fmo, Fho, Fxo, Fmeo, Ftolo]
Vspan = np.linspace(0.0, 238.0)

sol = odeint(dFdV, Finit, Vspan)

Ft = sol.sum(axis=1)  # sum each row
v = vo * Ft / Fto

FM = sol[:, 0]
FH = sol[:, 1]
FX = sol[:, 2]
FMe = sol[:, 3]
FT = sol[:, 4]

# see if the molar flow changes.
print(Ft / Fto)
#+END_SRC

#+RESULTS:
:RESULTS:
[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.
  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.
  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]
:END:

#+BEGIN_SRC ipython :session :results output drawer
tau = Vspan / vo

plt.plot(tau, FM / v, label='$C_M$')
plt.plot(tau, FH / v, label='$C_H$')
plt.plot(tau, FX / v, label='$C_X$')

plt.legend(loc='best')
plt.xlabel('$\\tau$ (hr)')
plt.ylabel('Concentration (lbmol/ft$^3$)')
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:ipython-inline-images/ob-ipython-331e83ff16f9a37c545a611f269d4ee4.png]]
:END:

You can see that the basic approach is the same as for a single reaction, the code is just /a lot/ longer.

In this example it was not necessary to compute the total molar flow. Inspection shows that it is a constant. Hence, the volumetric flow is also constant since there is no pressure drop and no temperature change.

Finally, you can see there is an optimal spacetime (or for fixed volumetric flow an optimal volume) that maximizes the production of xylene. That is because this is again a series reaction for xylene where it can be subsequently reacted to form toluene. In contrast, for hydrogen, it is consumed in parallel reactions.

* Summary

We are using a systematic approach to solving these problems.

1. Write out the mole balances, one for each species that is relevant. You should know these off the top of your head:

- Batch reactor
- Semibatch reactor
- CSTR
- PFR/PBR

2. Identify the rate law of each reaction, and the relative rate of reaction for each species in the reaction. For an $i^{th}$ reaction like $A \rightarrow C$ we have:

$r_i = \frac{r_{i,A}}{-a} = \frac{r_{i,C}}{c}$

3. Identify the net rate of reaction for each species, e.g. with two reactions: $r_A = r_{1,A} + r_{2,A}$.

4. Compute concentrations appropriate for the system to use in each net rate law.
- liquid system with constant volumetric flow: $C_i = F_i / \nu_0$
- gas system: $C_i = F_i / \nu$ and $\nu = \nu_0 \frac{F_T}{F_{T0}\frac{P0}{P}$

5. Solve the problem.
